# Backend-only Dockerfile (NestJS + Puppeteer), Debian-based for Chromium libs

# Base image with build-time dependencies and Chromium libs
FROM node:20-bookworm-slim AS base

# Install Chromium and required libraries for Puppeteer
RUN apt-get update && apt-get install -y --no-install-recommends \
    chromium \
    ca-certificates \
    libnss3 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libgbm1 \
    libasound2 \
    libpangocairo-1.0-0 \
    libxss1 \
    libgtk-3-0 \
    libxshmfence1 \
    libglu1 \
 && rm -rf /var/lib/apt/lists/*

ENV NODE_ENV=production
# Use system Chromium instead of downloading
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
# Ensure the app listens on 3003 by default
ENV PORT=3003

WORKDIR /app/backend

# -----------------------------
# Install dependencies (prod)
# -----------------------------
FROM base AS deps
WORKDIR /app/backend
COPY backend/package*.json ./
RUN --mount=type=cache,target=/root/.npm \
    if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then \
      npm ci --omit=dev; \
    else \
      npm install --omit=dev; \
    fi

# -----------------------------
# Build the app
# -----------------------------
FROM base AS builder
WORKDIR /app/backend
# Copy node_modules from deps
COPY --from=deps /app/backend/node_modules ./node_modules
# Copy source and build
COPY backend ./
RUN npm run build

# -----------------------------
# Runtime image
# -----------------------------
FROM node:20-bookworm-slim AS runner

# Install runtime libs for Chromium
RUN apt-get update && apt-get install -y --no-install-recommends \
    chromium \
    ca-certificates \
    libnss3 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libgbm1 \
    libasound2 \
    libpangocairo-1.0-0 \
    libxss1 \
    libgtk-3-0 \
    libxshmfence1 \
    libglu1 \
 && rm -rf /var/lib/apt/lists/*

ENV NODE_ENV=production
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
ENV PORT=3003

WORKDIR /app/backend

# Copy production deps and build output
COPY --from=deps /app/backend/node_modules ./node_modules
COPY --from=builder /app/backend/dist ./dist

EXPOSE 3003
CMD ["node", "dist/main.js"]